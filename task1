#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define constants for maximum students and maximum name length
#define MAX_STUDENTS 100
#define MAX_NAME_LENGTH 50

// Structure for storing student information
typedef struct {
    int id;
    char name[MAX_NAME_LENGTH];
    float grades[3]; // Assuming 3 grades per student
} Student;

// Global array to store students
Student students[MAX_STUDENTS];
int num_students = 0; // Current number of students

// Function prototypes
void display_menu();
void add_student();
void edit_student();
void delete_student();
void display_all_students();
void calculate_grades();

int main() {
    int choice;

    do {
        display_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to clear the newline character from input buffer

        switch(choice) {
            case 1:
                add_student();
                break;
            case 2:
                edit_student();
                break;
            case 3:
                delete_student();
                break;
            case 4:
                display_all_students();
                break;
            case 5:
                calculate_grades();
                break;
            case 6:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a number from 1 to 6.\n");
        }
    } while(choice != 6);

    return 0;
}

void display_menu() {
    printf("\n===== Student Management System Menu =====\n");
    printf("1. Add a new student\n");
    printf("2. Edit student information\n");
    printf("3. Delete a student\n");
    printf("4. Display all students\n");
    printf("5. Calculate grades\n");
    printf("6. Exit\n");
}

void add_student() {
    if (num_students >= MAX_STUDENTS) {
        printf("Cannot add more students. Database full.\n");
        return;
    }

    Student new_student;
    printf("Enter student ID: ");
    scanf("%d", &new_student.id);
    getchar(); // to clear the newline character from input buffer

    printf("Enter student name: ");
    fgets(new_student.name, MAX_NAME_LENGTH, stdin);
    new_student.name[strcspn(new_student.name, "\n")] = '\0'; // Remove newline from fgets input

    printf("Enter grades (separated by spaces): ");
    for (int i = 0; i < 3; ++i) {
        scanf("%f", &new_student.grades[i]);
    }

    students[num_students++] = new_student;
    printf("Student added successfully.\n");
}

void edit_student() {
    int id;
    printf("Enter student ID to edit: ");
    scanf("%d", &id);

    int found = 0;
    for (int i = 0; i < num_students; ++i) {
        if (students[i].id == id) {
            found = 1;

            printf("Enter new name for student: ");
            getchar(); // to clear the newline character from input buffer
            fgets(students[i].name, MAX_NAME_LENGTH, stdin);
            students[i].name[strcspn(students[i].name, "\n")] = '\0'; // Remove newline

            printf("Enter new grades (separated by spaces): ");
            for (int j = 0; j < 3; ++j) {
                scanf("%f", &students[i].grades[j]);
            }

            printf("Student information updated.\n");
            break;
        }
    }

    if (!found) {
        printf("Student with ID %d not found.\n", id);
    }
}

void delete_student() {
    int id;
    printf("Enter student ID to delete: ");
    scanf("%d", &id);

    int found = 0;
    for (int i = 0; i < num_students; ++i) {
        if (students[i].id == id) {
            found = 1;

            // Shift elements to the left to remove the student
            for (int j = i; j < num_students - 1; ++j) {
                students[j] = students[j + 1];
            }
            num_students--;

            printf("Student deleted successfully.\n");
            break;
        }
    }

    if (!found) {
        printf("Student with ID %d not found.\n", id);
    }
}

void display_all_students() {
    if (num_students == 0) {
        printf("No students in the database.\n");
        return;
    }

    printf("\n===== List of Students =====\n");
    for (int i = 0; i < num_students; ++i) {
        printf("ID: %d, Name: %s, Grades: %.2f %.2f %.2f\n", students[i].id, students[i].name,
               students[i].grades[0], students[i].grades[1], students[i].grades[2]);
    }
}

void calculate_grades() {
    int id;
    printf("Enter student ID to calculate grades: ");
    scanf("%d", &id);

    int found = 0;
    for (int i = 0; i < num_students; ++i) {
        if (students[i].id == id) {
            found = 1;

            float sum = 0.0;
            for (int j = 0; j < 3; ++j) {
                sum += students[i].grades[j];
            }
            float average = sum / 3.0;

            printf("Grades for student %s (ID: %d):\n", students[i].name, students[i].id);
            printf("Grade 1: %.2f\n", students[i].grades[0]);
            printf("Grade 2: %.2f\n", students[i].grades[1]);
            printf("Grade 3: %.2f\n", students[i].grades[2]);
            printf("Average grade: %.2f\n", average);
            break;
        }
    }

    if (!found) {
        printf("Student with ID %d not found.\n", id);
    }
}
